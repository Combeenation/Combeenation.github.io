<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en">
<!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Version 1.20 - Combeenation Docs</title>
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../css/control-dom-css.css" type="text/css" />
    <link rel="stylesheet" href="../css/release-notes.css" type="text/css" />
    <link rel="stylesheet" href="../css/theme.css" type="text/css" />
    <link rel="stylesheet" href="../css/theme_colors.css" type="text/css" />
    <link rel="stylesheet" href="../css/styles/vs.css">
    <link rel="stylesheet" href="../css/font-awesome.4.5.0.min.css">
</head>
<body role="document">
    <div class="grid-for-nav">
        <nav data-toggle="nav-shift" class="nav-side stickynav">
            <div class="side-nav-search">
                <a href="../index.htm"><i class="fa fa-home"></i> Combeenation Docs</a>
                <div role="search">
                    <form id="search-form" class="form" action="../Docnet_search.htm" method="get">
                        <input type="text" name="q" placeholder="Search docs" />
                    </form>
                </div>
            </div>
            <div class="menu menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
<ul>
<li class="tocentry"><a href="../index.htm">Getting Started</a>
</li>

<li class="tocentry">
<ul>
<li><span class="navigationgroup"><i class="fa fa-caret-down"></i> <a href="../releases.htm">Release Notes</a></span></li>

<li class="tocentry"><a href="../version/1.16.htm">Version 1.16</a>
</li>
<li class="tocentry current"><a class="current" href="../version/1.20.htm">Version 1.20</a>
<ul class="currentrelative">
<li class="tocentry"><a href="#EscapeOperator">Using components with the &#35; Operator</a></li>
<li class="tocentry"><a href="#general-features">General Features</a></li>
<li class="tocentry"><a href="#changes-to-text-in-hive">Changes to Text in Hive</a></li>
<li class="tocentry"><a href="#more-helpful-hive-errors">More Helpful Hive Errors</a></li>
<li class="tocentry"><a href="#new-dynamicvisual-items">New: DynamicVisual Items</a></li>
</ul>
</ul>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../hive/index.htm">Hive</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../Configurator.htm">Configurator</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../Configuratoreditor.htm">Configurator editor</a></span>
</li>
</ul>
				<div class="toc-footer">
					<span class="text-small">
						<hr/>
						<a href="https://github.com/FransBouma/DocNet" target="_blank">Made with <i class="fa fa-github"></i> DocNet</a>
					</span>
				</div>	
			</div>
            &nbsp;
        </nav>
        <section data-toggle="nav-shift" class="nav-content-wrap">
            <nav class="nav-top" role="navigation" aria-label="top navigation">
                <i data-toggle="nav-top" class="fa fa-bars"></i>
                <a href="../index.htm">Combeenation Docs</a>
            </nav>
            <div class="nav-content">
                <div role="navigation" aria-label="breadcrumbs navigation">
                    <div class="breadcrumbs">
<ul><li><a href="../index.htm">Getting Started</a></li> / <li><a href="../releases.htm">Release Notes</a></li> / <li><a href="../version%2f1.20.htm">Version 1.20</a></li></ul>
					
                    </div>
                    <hr />
                </div>
                <div role="main">
                    <div class="section">
<h1 id="version-1.20-highlights">Version 1.20 Highlights</h1>
<p><a href="../releases.htm#version-1.20.0">List of all changes</a></p>
<p>With version 1.20 we are releasing a large update to Combeenation's computational engine that has been a long time in development. The greatest part of this update won't have any directly visible effects for our users, but brings a number of performance and stability improvements that should make our configurators even more delightful to work with. </p>
<p>This update also lays the foundation for more advanced features that would not have been possible in the old system. Stay tuned for some juicy new features in the near future! Until then, we have a couple of new things for you to play with and a host of fixes and quality of life improvements for our ConfiguratorEditor. </p>
<p>One noteworthy improvement revolves around renaming components and changing their type: in the past, the ConfiguratorEditor sometimes failed to show all effects of these changes. We've completely re-designed the way we process such changes and have re-written the configurator-wide error analyser to be more reliable and efficient. </p>
<p>Other impactful changes are outlined in the sections below. Of particular importance is the following section as it will significantly affect your day-to-day work with the ConfiguratorEditor.</p>
<h2 id="EscapeOperator">Using components with the &#35; Operator</h2>
<p><em>Hidden identifiers can now be accessed with the new # operator. The operator <strong>must</strong> also be used to access the <code>Records</code>, <code>Value</code> and <code>SelectedKey</code> properties of a <code>RecordComponent</code>.</em></p>
<p>Naming things is hard. Poorly chosen component names can confuse your colleagues (or yourself) and sometimes they can get you into awkward situations. Imagine a <code>GraphicComponent</code> and inside it a visual with the name &quot;Width&quot;. Now imagine you had to use both the &quot;Width&quot; visual and the component's <code>Width</code> property – how can you tell them apart? They are both called &quot;Width&quot; after all.</p>
<p>This is where the new Escape Operator comes in: <code>Width</code> refers to the &quot;closer&quot; thing, in this case the visual, while <code>#Width</code> refers to the &quot;hidden&quot; or more distant thing, in this case the component's width property. For the most part, you can avoid landing in situations like this by picking meaningful names – but in case you do end up in one, the escape operator is there to help you.<br />
<em>This is also where the operator got its name – and because a number sign (#) resembles prison bars (and because naming things is hard).</em></p>
<p><img src="../img/escape-operator.jpg" alt="escape-operator" width="240" height="160" /></p>
<h3 id="components">Components</h3>
<p>There is a second, more frequently occurring scenario that requires the use of the # operator, and it has to do with certain kinds of components, like the <strong>RecordComponent</strong>. These components have always been two things at once: a component and a value produced by the component. The <code>RecordComponent</code> for instance possesses properties like <code>Records</code> and <code>SelectedKey</code>, while its value is the selected record.  
</p>
<p>Up until now you could just write the component's name and then access either its properties or those of its value. For example, <code>myComponent.Records</code> would return the Records property and <code>myComponent.Price</code> would return the &quot;Price&quot; column of the selected Record.</p>
<p>Things got ugly if both the component and its value contained a property with the same name. In that case <em>you</em> had to <em>know</em> which one the system would use, and how to get a hold of the <em>other</em> one. For RecordComponents, that meant you had to write e.g. <code>myComponent.Value.Name</code> instead of <code>myComponent.Name</code> (because &quot;Name&quot; would refer to the component's Name, not the &quot;Name&quot; column of its value). </p>
<p>Confusing, isn't it? Our goal is to remove these complicated scenarios, but to get there we first had to stop the system from choosing one out of two possible properties for you. Unfortunately that means that for now, <em>you</em> have to do the choosing.</p>
<p><strong>Specifically,</strong> to access any property of a RecordComponent, you now have to use the Escape Operator. For example, to access the Records property you have to write <code>#myComponent.Records</code>. This is now <strong>required</strong>. On the plus side, <code>myComponent.Name</code> will now always refer to the &quot;Name&quot; column (if there is one), meaning you no longer have to write <code>myComponent.Value.Name</code>.</p>
<h3 id="under-the-hood">Under the hood</h3>
<p>If you're wondering why we chose the Escape Operator to discern component properties, then this section is for you. If you had enough of obscure compiler mumbo jumbo, feel free to move on to the <a href="#general-features">next section</a>.</p>
<p>At the beginning of this section we mentioned that certain components are two things at once – a component and its value. This is no longer the case. A component and its value are now two separate entities, where the value is &quot;closer&quot; to you, the user. As a result you always work with the value by default, and if you want to use the &quot;hidden&quot; component you need to &quot;escape&quot; the value first. </p>
<p>Other components that are affected by this change are, in theory, the <code>ValueComponent</code> and <code>ResourceComponent</code>. However, contrary to the <code>RecordComponent</code>, it is unlikely that you will end up needing any of their properties, so don't worry about it. And in case you do need to access one of them, just use the Escape Operator.</p>
<h2 id="general-features">General Features</h2>
<p>We have added two <strong>new variables</strong> that can be used to obtain various kinds of information about your configurator: <code>configurator</code> and <code>presets</code>. For more details, check out their <a href="../hive/configurator.htm">documentation</a>. The <code>configurator</code> variable is a replacement for the <code>plan</code> keyword, which will be <strong>removed</strong> in a future version.</p>
<p>In addition to single-line comments, you can now also write comments that span multiple lines or just a portion of a single line. Start the comment with <code>/*</code> and end it with <code>*/</code>, further details and examples can be found in the <a href="../hive/comments.htm">documentation</a>.</p>
<h2 id="changes-to-text-in-hive">Changes to Text in Hive</h2>
<p><em>Text comparison is now case sensitive by default, new functions and features have been added to Text.</em></p>
<p><strong>Comparing</strong> texts in Hive used to be case insensitive, meaning <code>&quot;hi&quot; = &quot;Hi&quot;</code> would return <code>true</code>. This was convenient in some cases but problematic in others, for example when you have to deal with case-sensitive product IDs or SKUs. </p>
<p>Text is now <strong>case sensitive</strong>, meaning <code>&quot;hi&quot; = &quot;Hi&quot;</code> will return <code>false</code>. However, we added a <code>~=</code> operator for Text that ignores casing to support existing use cases: <code>&quot;hi&quot; ~= &quot;Hi&quot;</code> will return <code>true</code>, just like the <code>=</code> operator used to. </p>
<p>This change also affects <strong>Maps</strong> such as <code>Resources</code> or <code>Components</code>. When you wish to retrieve e.g. a Resource by constructing its Name dynamically, you need to use the exact same case you used when creating the Resource.<br />
For example, if you have a <code>ResourceComponent</code> called &quot;pics&quot; and within it a Resource with the name &quot;Pic1&quot;, you must write <code>pics.Resources.Get(&quot;Pic1&quot;)</code> to retrieve it. Writing <code>Get(&quot;pic1&quot;)</code> will not return it. (Note that this does <strong>not</strong> affect direct references to the resource! These are still case-insensitive, meaning that <code>pics.Pic1</code> will work)</p>
<p>We also added two <strong>new functions</strong> to Text: <code>contains</code> can be used to check if a Text contains certain characters or words and <code>replace</code> can be used to replace them with a different Text. Check out the <a href="../hive/text.htm#functions">Text documentation</a> for more details and examples! </p>
<h2 id="more-helpful-hive-errors">More Helpful Hive Errors</h2>
<p><em>Error messages are more precise, easier to understand and include more helpful information.</em></p>
<p>We've <strong>completely rewritten</strong> all compiler errors to be more understandable and less technical. Each error now briefly states what the problem is and may contain a hint at the end to further explain why it occurred and/or provide guidance for inexperienced users. </p>
<p>We also improved the code <strong>snippets</strong> that are shown in the error message to more precisely highlight where the error occurred. These snippets now also work properly when the affected area spans multiple lines.</p>
<p>Here is an example:</p>
<pre class="nocode">-- ERROR in TestComponent --------------------------------------------------------------------------

The branches of this 'if' produce different types of values:
The 'then' branch has type Number but the 'else' branch is Text.

3|   if true then 1 else &quot;2&quot; end
                         ^^^

Hint: All branches must have the same type so that no matter which one we take, we always get back the same type of value.
</pre><h2 id="new-dynamicvisual-items">New: DynamicVisual Items</h2>
<p><em>You can now access the individual items generated by a <code>DynamicVisual</code> with its new <code>Items</code> property.</em></p>
<p><code>Items</code> is a list of visuals, which means you first need to pick the one you are interested in with the <code>Get</code> function. You can then access all properties of that visual, such as its <code>X</code> or <code>Y</code> coordinates or its <code>Texture</code> or <code>Shape</code>: </p>
<pre class="nocode">// get the 'x' coordinate of the 2nd visual of the 'boxes' DynamicVisual
DefaultView.boxes.Items.Get(2).X
</pre><p>The number of items matches that of the DynamicVisual's <code>ItemSource</code> property.</p>

                    </div>
                </div>
                <footer>
                    <hr />
                    <div role="contentinfo">
Start building a <a href='http://www.combeenation.com/' target='_blank'>Combeenation</a> configurator at <a href='https://portal.combeenation.com' target='_blank'>portal.combeenation.com</a>!
                    </div>
                </footer>
            </div>
        </section>
    </div>
    <script src="../js/jquery-2.1.1.min.js"></script>
    <script src="../js/modernizr-2.8.3.min.js"></script>
    <script src="../js/highlight.pack.js"></script>
    <script src="../js/theme.js"></script>
{{ExtraScript}}
</body>
</html>
